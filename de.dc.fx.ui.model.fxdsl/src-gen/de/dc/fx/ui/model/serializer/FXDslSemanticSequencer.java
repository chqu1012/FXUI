/*
 * generated by Xtext 2.14.0
 */
package de.dc.fx.ui.model.serializer;

import com.google.inject.Inject;
import de.dc.fx.ui.model.fxui.FXColumn;
import de.dc.fx.ui.model.fxui.FXModel;
import de.dc.fx.ui.model.fxui.FXProperty;
import de.dc.fx.ui.model.fxui.FXTableView;
import de.dc.fx.ui.model.fxui.FxuiPackage;
import de.dc.fx.ui.model.services.FXDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class FXDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FXDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FxuiPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FxuiPackage.FX_COLUMN:
				sequence_FXColumn(context, (FXColumn) semanticObject); 
				return; 
			case FxuiPackage.FX_MODEL:
				sequence_FXModel(context, (FXModel) semanticObject); 
				return; 
			case FxuiPackage.FX_PROPERTY:
				sequence_FXProperty(context, (FXProperty) semanticObject); 
				return; 
			case FxuiPackage.FX_TABLE_VIEW:
				sequence_FXTableView(context, (FXTableView) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     FXColumn returns FXColumn
	 *
	 * Constraint:
	 *     (
	 *         editable?='editable'? 
	 *         useCustomCellFactory?='useCustomCellFactory'? 
	 *         name=EString 
	 *         width=EDouble? 
	 *         alignment=Pos? 
	 *         associatedFXProperty=[FXProperty|EString]?
	 *     )
	 */
	protected void sequence_FXColumn(ISerializationContext context, FXColumn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FXModel returns FXModel
	 *
	 * Constraint:
	 *     (name=EString fxProperties+=FXProperty fxProperties+=FXProperty*)
	 */
	protected void sequence_FXModel(ISerializationContext context, FXModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FXProperty returns FXProperty
	 *
	 * Constraint:
	 *     (type=EString name=EString)
	 */
	protected void sequence_FXProperty(ISerializationContext context, FXProperty semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FxuiPackage.Literals.FX_PROPERTY__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FxuiPackage.Literals.FX_PROPERTY__TYPE));
			if (transientValues.isValueTransient(semanticObject, FxuiPackage.Literals.FX_NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FxuiPackage.Literals.FX_NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFXPropertyAccess().getTypeEStringParserRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getFXPropertyAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FXTableView returns FXTableView
	 *
	 * Constraint:
	 *     (
	 *         hasFilter?='hasFilter'? 
	 *         hasSorter?='hasSorter'? 
	 *         name=EString 
	 *         packagePath=EString? 
	 *         (fxColumns+=FXColumn fxColumns+=FXColumn*)? 
	 *         fxEntity=FXModel?
	 *     )
	 */
	protected void sequence_FXTableView(ISerializationContext context, FXTableView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
