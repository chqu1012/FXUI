/**
 * generated by Xtext 2.14.0
 */
package de.dc.fx.ui.model.jvmmodel;

import de.dc.fx.ui.model.fxui.FXTableView;
import java.util.Arrays;

/**
 * <p>Infers a JVM model from the source model.</p>
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
 */
@SuppressWarnings("all")
public class FXDslJvmModelInferrer /* implements AbstractModelInferrer  */{
  /**
   * convenience API to build and initialize JVM types and their members.
   */
  /* @Inject
   */private /* JvmTypesBuilder */Object _jvmTypesBuilder;
  
  /**
   * The dispatch method {@code infer} is called for each instance of the
   * given element's type that is contained in a resource.
   * 
   * @param element
   *            the model to create one or more
   *            {@link JvmDeclaredType declared
   *            types} from.
   * @param acceptor
   *            each created
   *            {@link JvmDeclaredType type}
   *            without a container should be passed to the acceptor in order
   *            get attached to the current resource. The acceptor's
   *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
   *            accept(..)} method takes the constructed empty type for the
   *            pre-indexing phase. This one is further initialized in the
   *            indexing phase using the lambda you pass as the last argument.
   * @param isPreIndexingPhase
   *            whether the method is called in a pre-indexing phase, i.e.
   *            when the global index is not yet fully updated. You must not
   *            rely on linking using the index if isPreIndexingPhase is
   *            <code>true</code>.
   */
  protected void _infer(final FXTableView element, final /* IJvmDeclaredTypeAcceptor */Object acceptor, final boolean isPreIndexingPhase) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method toClass(Object) is undefined for the type FXTableView"
      + "\n+ cannot be resolved."
      + "\nThe method or field members is undefined"
      + "\nThe method toMethod(FXTableView, String, Object, Object) is undefined"
      + "\nThe method or field typeRef is undefined for the type Class<Void>"
      + "\nThe method visibility(Object) is undefined"
      + "\nJvmVisibility cannot be resolved to a type."
      + "\nThe method body(String) is undefined"
      + "\naccept cannot be resolved"
      + "\n+ cannot be resolved"
      + "\n+= cannot be resolved"
      + "\nPROTECTED cannot be resolved");
  }
  
  public void infer(final FXTableView element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (acceptor != null) {
      _infer(element, acceptor, isPreIndexingPhase);
      return; else {
        throw new IllegalArgumentException("Unhandled parameter types: " +
          Arrays.<Object>asList(element, acceptor, isPreIndexingPhase).toString());
      }
    }
  }
  