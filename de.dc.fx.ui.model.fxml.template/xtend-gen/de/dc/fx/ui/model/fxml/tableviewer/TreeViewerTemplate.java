package de.dc.fx.ui.model.fxml.tableviewer;

import de.dc.fx.ui.model.fxui.FXModel;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class TreeViewerTemplate /* implements IGenerator<FXModel>  */{
  @Override
  public CharSequence gen(final FXModel data) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package tableviewer;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import javafx.scene.control.TreeItem;");
    _builder.newLine();
    _builder.append("import javafx.scene.control.TreeView;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TableViewer<T> extends TableView<T> implements IViewer<T>{");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ILabelProvider<T> labelprovider;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private IContentProvider<T> contentprovider;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private TreeItem<T> root = new TreeItem<>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private ObservableList<T> inputList = FXCollections.observableArrayList();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private FilteredList<T> filteredList = new FilteredList<T>(inputList, p->true);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private SortedList<T> sortedList = new SortedList<T>(filteredList);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public TableViewer() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setItems(sortedList);");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("sortedList.comparatorProperty().bind(comparatorProperty());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setLabelProvider(ILabelProvider<T> labelprovider) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.labelprovider = labelprovider;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setContentProvider(IContentProvider<T> contentprovider) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.contentprovider = contentprovider;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("public void addColumn(TableColumn<T, T> column){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("getColumns().add(column);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("column.setCellFactory(col->new TableCell<T, T>(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("protected void updateItem(T item, boolean empty) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("super.updateItem(item, empty);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (item == null || empty) {");
    _builder.newLine();
    _builder.append("            \t");
    _builder.append("setText(null);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("            \t");
    _builder.append("setText(labelprovider.getText(item));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("public void setInput(Object input) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<T> elements = contentprovider.getElements(input);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("inputList.clear();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("inputList.addAll(elements);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
