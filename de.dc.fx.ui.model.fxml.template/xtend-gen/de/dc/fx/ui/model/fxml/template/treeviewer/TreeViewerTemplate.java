package de.dc.fx.ui.model.fxml.template.treeviewer;

import de.dc.fx.ui.model.fxml.template.IGenerator;
import de.dc.fx.ui.model.fxui.FXTreeView;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class TreeViewerTemplate implements IGenerator<FXTreeView> {
  @Override
  public String gen(final FXTreeView data) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _packagePath = data.getPackagePath();
    _builder.append(_packagePath);
    _builder.append(".viewer;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import javafx.scene.control.*;");
    _builder.newLine();
    _builder.append("import ");
    String _packagePath_1 = data.getPackagePath();
    _builder.append(_packagePath_1);
    _builder.append(".provider.*;");
    _builder.newLineIfNotEmpty();
    _builder.append("import javafx.scene.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TreeViewer<T> extends TreeView<T> implements IViewer<T>{");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ILabelProvider<T> labelprovider;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private IContentProvider<T> contentprovider;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private TreeItem<T> root = new TreeItem<>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public TreeViewer() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("setShowRoot(false);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setInput(T input) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<T> elements = contentprovider.getElements(input);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("elements.stream().forEach(element->buildTree(root, element));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("setRoot(root);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("setCellFactory(view->new TreeCell<T>(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected void updateItem(T item, boolean empty){");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("super.updateItem(item, empty);");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("if(empty){");
    _builder.newLine();
    _builder.append("\t\t      ");
    _builder.append("setText(null);");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("setText(labelprovider.getText(item));");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void buildTree(TreeItem<T> parentItem, T element){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Node image = labelprovider.getImage(element);                        ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("TreeItem<T> currentItem=new TreeItem<T>(element, image);\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("parentItem.getChildren().add(currentItem);\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Build current item");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Link with parent");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(contentprovider.hasChildren(element)){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Iterate over all childs");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<T> children = contentprovider.getChildren(element);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("children.forEach(current->buildTree(currentItem,current));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setLabelProvider(ILabelProvider<T> labelprovider) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("this.labelprovider = labelprovider;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setContentProvider(IContentProvider<T> contentprovider) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("this.contentprovider = contentprovider;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
}
